{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "lesslms CloudFormation template 18.04.2019",
    "Resources": {

        "tableCourses": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "AttributeDefinitions": [{
                        "AttributeName": "sourceId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "relatedId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "sourceId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "relatedId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "courses"
            }
        },

        "tableUsers": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "AttributeDefinitions": [{
                        "AttributeName": "userId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "sourceId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "sourceId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "users"
            }
        },

        "tablePublished": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "AttributeDefinitions": [{
                        "AttributeName": "sourceId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "versionId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "sourceId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "versionId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "published"
            }
        },

        "tableStatement": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "AttributeDefinitions": [{
                        "AttributeName": "statementId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "timestamp",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "statementId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "xStatement"
            }
        },

        "tableFilter": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "AttributeDefinitions": [{
                        "AttributeName": "propertyId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "statementId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "propertyId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "statementId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "xFilter"
            }
        },

        "tableState": {
            "Type": "AWS::DynamoDB::Table",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "AttributeDefinitions": [{
                        "AttributeName": "activityId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "agentId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [{
                        "AttributeName": "activityId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "agentId",
                        "KeyType": "RANGE"
                    }
                ],
                "GlobalSecondaryIndexes": [{
                    "IndexName": "xStateGSI",
                    "KeySchema": [{
                            "AttributeName": "agentId",
                            "KeyType": "HASH"
                        },
                        {
                            "AttributeName": "activityId",
                            "KeyType": "RANGE"
                        }
                    ],
                    "Projection": { "ProjectionType": "KEYS_ONLY" },
                    "ProvisionedThroughput": {
                        "ReadCapacityUnits": "1",
                        "WriteCapacityUnits": "1"
                    }
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                },
                "TableName": "xState"
            }
        },

        "lmsLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "launchName"
                    },
                    "S3Key": "lambda/lms.zip"
                },
                "Description": "lesslms Lambda function",
                "FunctionName": "lmsLambda",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
				"MemorySize": "512",
				"Timeout": "10"
				
            }
        },
        "xapiLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "launchName"
                    },
                    "S3Key": "lambda/xapi.zip"
                },
                "Description": "lesslms Lambda function",
                "FunctionName": "xapiLambda",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "userLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "launchName"
                    },
                    "S3Key": "lambda/user.zip"
                },
                "Description": "lesslms Lambda function",
                "FunctionName": "userLambda",
                "Handler": "index.handler",
                "MemorySize": 512,
                "Timeout": 10,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaInvokeRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "authLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "launchName"
                    },
                    "S3Key": "lambda/auth.zip"
                },
                "Description": "lesslms Lambda function",
                "FunctionName": "authLambda",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "authLambdaAutorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
                "AuthorizerResultTtlInSeconds": 0,
                "AuthorizerUri": {
                    "Fn::Join": [
                        "", [
                            "arn:aws:apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "authLambda",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IdentitySource": "method.request.header.accessToken",
                "Name": "userAuthorizer",
                "ProviderARNs": [],
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "Type": "TOKEN"
            }
        },

        "cognitoHelper": {
            "DependsOn": "lmsCognitoClient",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": ["", [
                            "exports.handler = function(event, context) {", "\r\n",
                            "console.log('<<<__________________cognitoHelper:',JSON.stringify(event, null, 2));", "\r\n",
                            "let data = {", "\r\n",
                            "ClientId: '", { "Ref": "lmsCognitoClient" }, "',", "\r\n",
                            "UserPoolId : '", { "Ref": "lmsCognitoPool" }, "'", "\r\n",
                            "}", "\r\n",
                            "console.log('<<<__________________cognitoHelper:',JSON.stringify(data, null, 2));", "\r\n",
                            "context.succeed(data);", "\r\n",
                            "};", "\r\n"
                        ]]
                    }
                },
                "Description": "source code for cognitoHelper",
                "FunctionName": "cognitoHelper",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaInvokeRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 25
            }
        },

        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com",
                                "apigateway.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [{
                    "PolicyName": "LambdaPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:*",
                                "cognito-idp:*",
                                "logs:*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "LambdaInvokeRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [{
                    "PolicyName": "LambdaInvokePolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:*",
                                "cognito-idp:*",
                                "logs:*",
                                "lambda:*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "lmsLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "lmsLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "", [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "lessApi"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "xapiLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "xapiLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "", [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "lessApi"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "userLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "userLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "", [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "lessApi"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "authLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "authLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "", [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "lessApi"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "ApiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "apigateway.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Policies": [{
                    "PolicyName": "ApiGatewayLogsPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "logs:*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },
        "ApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": [
                        "ApiGatewayCloudWatchLogsRole",
                        "Arn"
                    ]
                }
            }
        },
        "lessApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Ref": "launchName"
                },
                "Description": "api",
                "FailOnWarnings": true
            }
        },
        "lessApiStage": {
            "DependsOn": [
                "ApiGatewayAccount"
            ],
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ApiDeployment"
                },
                "MethodSettings": [{
                    "DataTraceEnabled": true,
                    "HttpMethod": "*",
                    "LoggingLevel": "INFO",
                    "ResourcePath": "/*"
                }],
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "StageName": "less"
            }
        },
        "ApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [
                "lmsProxy",
                "xapiProxy",
                "userProxy"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                }
            }
        },
        "lmsResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "lessApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": "lms"
            }
        },
        "xapiResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "lessApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": "xapi"
            }
        },
        "userResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "lessApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": "user"
            }
        },
        "lmsResourceProxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "ParentId": {
                    "Ref": "lmsResource"
                },
                "PathPart": "{proxy+}"
            }
        },
        "xapiResourceProxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "ParentId": {
                    "Ref": "xapiResource"
                },
                "PathPart": "{proxy+}"
            }
        },
        "userResourceProxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "ParentId": {
                    "Ref": "userResource"
                },
                "PathPart": "{proxy+}"
            }
        },
        "lmsProxy": {
            "DependsOn": "lmsLambdaPermission",
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                    "Ref": "authLambdaAutorizer"
                },
                "HttpMethod": "ANY",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "", [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "lmsLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": 200
                    }],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "", [
                                    "{",
                                    "  \"name\": \"$input.params('name')\"",
                                    "}"
                                ]
                            ]
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.name": false
                },
                "ResourceId": {
                    "Ref": "lmsResourceProxy"
                },
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "MethodResponses": [{
                    "StatusCode": 200
                }]
            }
        },
        "xapiProxy": {
            "DependsOn": "xapiLambdaPermission",
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                    "Ref": "authLambdaAutorizer"
                },
                "HttpMethod": "ANY",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "", [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "xapiLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": 200
                    }],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "", [
                                    "{",
                                    "  \"name\": \"$input.params('name')\"",
                                    "}"
                                ]
                            ]
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.name": false
                },
                "ResourceId": {
                    "Ref": "xapiResourceProxy"
                },
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "MethodResponses": [{
                    "StatusCode": 200
                }]
            }
        },
        "userProxy": {
            "DependsOn": "xapiLambdaPermission",
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "ANY",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Join": [
                            "", [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "userLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [{
                        "StatusCode": 200
                    }],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "", [
                                    "{",
                                    "  \"name\": \"$input.params('name')\"",
                                    "}"
                                ]
                            ]
                        }
                    }
                },
                "RequestParameters": {
                    "method.request.querystring.name": false
                },
                "ResourceId": {
                    "Ref": "userResourceProxy"
                },
                "RestApiId": {
                    "Ref": "lessApi"
                },
                "MethodResponses": [{
                    "StatusCode": 200
                }]
            }
        },

        "lmsCognitoPool": {
            "DependsOn": "lessApiStage",
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
                "AutoVerifiedAttributes": ["email"],
                "EmailVerificationMessage": "Welcome to lesslms!\r\nYour username is {username} and temporary password is {####}.",
                "EmailVerificationSubject": "lesslms verification request",
                "MfaConfiguration": "OFF",
                "UsernameAttributes": ["email"],
                "UserPoolName": { "Ref": "launchName" },
                "Policies": {
                    "PasswordPolicy": {
                        "MinimumLength": 6,
                        "RequireLowercase": true,
                        "RequireNumbers": false,
                        "RequireSymbols": false,
                        "RequireUppercase": false
                    }
                }
            }
        },

        "lmsCognitoClient": {
            "DependsOn": "lmsCognitoPool",
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "ClientName": { "Ref": "launchName" },
                "GenerateSecret": false,
                "RefreshTokenValidity": 30,
                "UserPoolId": { "Ref": "lmsCognitoPool" }
            }
        },

        "lmsCognitoUser": {
            "Type": "AWS::Cognito::UserPoolUser",
            "DependsOn": [
                "lmsCognitoPool"
            ],
            "Properties": {
                "DesiredDeliveryMediums": ["EMAIL"],
                "ForceAliasCreation": false,
                "UserAttributes": [
                    { "Name": "profile", "Value": "administrator" },
                    { "Name": "zoneinfo", "Value": { "Ref": "launchRegion" } },
                    {
                        "Name": "website",
                        "Value": {
                            "Fn::Join": ["", [
                                "https://",
                                {
                                    "Ref": "lessApi"
                                },
                                ".execute-api.",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ".amazonaws.com/",
                                {
                                    "Ref": "lessApiStage"
                                },
                                "/"
                            ]]
                        }
                    }
                ],
                "Username": { "Ref": "adminEmail" },
                "UserPoolId": { "Ref": "lmsCognitoPool" }
            }
        }
    },
    "Outputs": {
        "ApiGatewayUri": {
            "Description": "Root URL of the lesslms API gateway",
            "Value": {
                "Fn::Join": ["", [
                    "https://",
                    {
                        "Ref": "lessApi"
                    },
                    ".execute-api.",
                    {
                        "Ref": "AWS::Region"
                    },
                    ".amazonaws.com/",
                    {
                        "Ref": "lessApiStage"
                    },
                    "/"
                ]]
            }
        },
        "cognitoPool": {
            "Description": "Cognito Pool lesslms reference",
            "Value": {
                "Fn::Join": ["", [
					"{ \"ClientId\":  \"",{ "Ref": "lmsCognitoClient" },"\" ,",                    
                    "  \"UserPoolId\":\"",{ "Ref": "lmsCognitoPool" }  ,"\" }"
                ]]
            }
        }
    },
    "Parameters": {
        "launchName": {
            "Type": "String",
            "Default": "lesslms-00000000"
        },
		"launchRegion": {
            "Type": "String",
            "Default": "eu-central-1"
        },					
        "adminEmail": {
            "Type": "String",
            "Default": "default@uoc.edu"
        }
    }
}
